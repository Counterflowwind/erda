// Code generated by protoc-gen-go-client. DO NOT EDIT.
// Sources: expressionl.proto

package client

import (
	context "context"

	grpc "github.com/erda-project/erda-infra/pkg/transport/grpc"
	pb "github.com/erda-project/erda-proto-go/core/monitor/expression/pb"
	grpc1 "google.golang.org/grpc"
)

// Client provide all service clients.
type Client interface {
	// ExpressionService expressionl.proto
	ExpressionService() pb.ExpressionServiceClient
}

// New create client
func New(cc grpc.ClientConnInterface) Client {
	return &serviceClients{
		expressionService: pb.NewExpressionServiceClient(cc),
	}
}

type serviceClients struct {
	expressionService pb.ExpressionServiceClient
}

func (c *serviceClients) ExpressionService() pb.ExpressionServiceClient {
	return c.expressionService
}

type expressionServiceWrapper struct {
	client pb.ExpressionServiceClient
	opts   []grpc1.CallOption
}

func (s *expressionServiceWrapper) GetAllEnabledExpression(ctx context.Context, req *pb.GetAllEnabledExpressionRequest) (*pb.GetAllEnabledExpressionResponse, error) {
	return s.client.GetAllEnabledExpression(ctx, req, append(grpc.CallOptionFromContext(ctx), s.opts...)...)
}
