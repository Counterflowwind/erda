// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: expressionl.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*GetAllEnabledExpressionRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetAllEnabledExpressionResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*EnabledExpression)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Expression)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetAllAlertRulesRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetAllAlertRulesResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AllAlertRules)(nil)

// GetAllEnabledExpressionRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetAllEnabledExpressionRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// GetAllEnabledExpressionResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetAllEnabledExpressionResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// EnabledExpression implement urlenc.URLValuesUnmarshaler.
func (m *EnabledExpression) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// Expression implement urlenc.URLValuesUnmarshaler.
func (m *Expression) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "version":
				m.Version = vals[0]
			case "enable":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Enable = val
			case "alertId":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.AlertId = val
			}
		}
	}
	return nil
}

// GetAllAlertRulesRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetAllAlertRulesRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "scope":
				m.Scope = vals[0]
			}
		}
	}
	return nil
}

// GetAllAlertRulesResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetAllAlertRulesResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "data":
				if m.Data == nil {
					m.Data = &AllAlertRules{}
				}
			case "data.windows":
				if m.Data == nil {
					m.Data = &AllAlertRules{}
				}
				list := make([]int64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseInt(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.Data.Windows = list
			}
		}
	}
	return nil
}

// AllAlertRules implement urlenc.URLValuesUnmarshaler.
func (m *AllAlertRules) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "windows":
				list := make([]int64, 0, len(vals))
				for _, text := range vals {
					val, err := strconv.ParseInt(text, 10, 64)
					if err != nil {
						return err
					}
					list = append(list, val)
				}
				m.Windows = list
			}
		}
	}
	return nil
}
