// Code generated by protoc-gen-go-form. DO NOT EDIT.
// Source: expression.proto

package pb

import (
	url "net/url"
	strconv "strconv"

	urlenc "github.com/erda-project/erda-infra/pkg/urlenc"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the "github.com/erda-project/erda-infra/pkg/urlenc" package it is being compiled against.
var _ urlenc.URLValuesUnmarshaler = (*GetAllEnabledExpressionRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetAllEnabledExpressionResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*Expression)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetAllAlertTemplateRequest)(nil)
var _ urlenc.URLValuesUnmarshaler = (*GetAllAlertTemplateResponse)(nil)
var _ urlenc.URLValuesUnmarshaler = (*AlertTemplate)(nil)

// GetAllEnabledExpressionRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetAllEnabledExpressionRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			}
		}
	}
	return nil
}

// GetAllEnabledExpressionResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetAllEnabledExpressionResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// Expression implement urlenc.URLValuesUnmarshaler.
func (m *Expression) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "id":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.Id = val
			case "version":
				m.Version = vals[0]
			case "enable":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Enable = val
			case "alertId":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.AlertId = val
			}
		}
	}
	return nil
}

// GetAllAlertTemplateRequest implement urlenc.URLValuesUnmarshaler.
func (m *GetAllAlertTemplateRequest) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "pageNo":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageNo = val
			case "pageSize":
				val, err := strconv.ParseInt(vals[0], 10, 64)
				if err != nil {
					return err
				}
				m.PageSize = val
			}
		}
	}
	return nil
}

// GetAllAlertTemplateResponse implement urlenc.URLValuesUnmarshaler.
func (m *GetAllAlertTemplateResponse) UnmarshalURLValues(prefix string, values url.Values) error {
	return nil
}

// AlertTemplate implement urlenc.URLValuesUnmarshaler.
func (m *AlertTemplate) UnmarshalURLValues(prefix string, values url.Values) error {
	for key, vals := range values {
		if len(vals) > 0 {
			switch prefix + key {
			case "name":
				m.Name = vals[0]
			case "alertType":
				m.AlertType = vals[0]
			case "alertIndex":
				m.AlertIndex = vals[0]
			case "target":
				m.Target = vals[0]
			case "trigger":
				m.Trigger = vals[0]
			case "title":
				m.Title = vals[0]
			case "template":
				m.Template = vals[0]
			case "version":
				m.Version = vals[0]
			case "enable":
				val, err := strconv.ParseBool(vals[0])
				if err != nil {
					return err
				}
				m.Enable = val
			}
		}
	}
	return nil
}
